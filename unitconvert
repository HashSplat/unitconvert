#!/usr/bin/env python

import traceback
import sys
import argparse


class Mass(Unit):
    pass


class Time(Unit):
    pass


class Volume(Unit):
    pass


base_dec = 1000.0
digital_units = {
    'YB': base_dec ** 8.0, #bytes in a yottabyte
    'ZB': base_dec ** 7.0, #bytes in a zettabyte
    'EB': base_dec ** 6.0, #bytes in a exabyte
    'PB': base_dec ** 5.0, #bytes in a petabyte
    'TB': base_dec ** 4.0, #bytes in a terabyte
    'GB': base_dec ** 3.0, #bytes in a gigabyte
    'MB': base_dec ** 2.0, #bytes in a megabyte
    'kB': base_dec,        #bytes in a kilobyte
    'B': 1.0               #bytes in a byte
}

inch = 25.4000508001
length_units = {
    'mi': inch * 63360.0, #millimeters in a mile
    'km': 1000000.0,      #millimeters in a kilometer
    'm':  1000.0,         #millimeters in a meter
    'yd': inch * 36.0,    #millimeters in a yard
    'ft': inch * 12.0,    #millimeters in a foot
    'in': inch,           #millimeters in an inch
    'cm': 10.0,           #millimeters in a centimeter
    'mm': 1.0             #millimeters in a millimeter
}

oz = 28349.5231
mass_units = {
    'kg': 1000000.0, #milligrams in a kilogram
    'lb': oz * 16.0, #milligrams in a pound
    'oz': oz,        #milligrams in an ounce
    'g': 1000.0,     #milligrams in a gram
    'mg': 1.0        #milligrams in a milligram
}

day = (1000.0 * 3600.0) * 24.0
time_units = {
    'yr': day * 365.0,         #milliseconds in a year
    'mo': (day * 365.0) / 12,  #milliseconds in a month
    'wk': day * 7.0,           #milliseconds in a week
    'day': day,                #milliseconds in a day
    'hr': 1000.0 * 3600.0,     #milliseconds in an hour
    'min': 1000.0 * 60.0,      #milliseconds in a minute
    'sec': 1000.0,             #milliseconds in a second
    'ms': 1.0,                 #milliseconds in a millisecond
}

ustsp = 4.92892159
usgal = ustsp * 768.0
in3 = usgal / 231
volume_units = {
    'ft3': in3 * 1728,      #milliliters in a cubic foot
    'in3': in3,             #milliliters in a cubic inch
    'l': 1000.0,            #milliliters in a liter
    'usgal': usgal,         #milliliters in a us gal
    'usqt': ustsp * 192.0,  #milliliters in a us qt
    'uspt': ustsp * 96.0,   #milliliters in a us pt
    'uscup': ustsp * 48.0,  #milliliters in a us cup
    'ustbsp': ustsp * 3.0,  #milliliters in a us tbsp
    'ustsp': ustsp,         #milliliters in a us tsp
    'ml': 1.0,              #milliliters in a milliliter
}


# Temperature conversion goes in its own special function because the
# math is much different than the other units
def convert_temperature(dec_space, amt, conv_from, conv_to):
    temp_units = {
        'F': {
            'C': (amt - 32.0) * 5 / 9,
            'K': (amt + 459.67) * 5 / 9,
            'F': amt
        },
        'C': {
            'F': (amt * 9) / 5 + 32.0,
            'K': amt + 273.15,
            'C': amt
        },
        'K': {
            'F': amt * 9 / 5 - 459.67,
            'C': amt - 273.15,
            'K': amt
        }
    }
    calc = round(temp_units[conv_from][conv_to], dec_space)
    return '{0}{1} = {2}{3}'.format(amt, conv_from, calc, conv_to)


def convert_units(dec_space, amt, conv_from, conv_to, units):
    calc = round((amt * units[conv_from]) / units[conv_to], dec_space)
    if calc >= 0:
        return '{0}{1} = {2}{3}'.format(amt, conv_from, calc, conv_to)
    else:
        return "Can't convert."


unit_groups = [digital_units, length_units, mass_units, time_units, 
volume_units]
temperature = ['F', 'C', 'K']


def usage():
    print 'Usage: [amount] [convert from] [convert to]'
    print 'Example: 34 GB MB'
    print '\nAvailable conversions:'
    print 'Digital: {0}'.format(', '.join(digital_units.keys()))
    print 'Length: {0}'.format(', '.join(length_units.keys()))
    print 'Mass: {0}'.format(', '.join(mass_units.keys()))
    print 'Temperature: {0}'.format(', '.join(temperature))
    print 'Time: {0}'.format(', '.join(time_units.keys()))
    print 'Volume: {0}'.format(', '.join(volume_units.keys()))


def main():
    try:

        parser = argparse.ArgumentParser()
        parser.add_argument('-a', '--amount', help='Amount to convert')
        parser.add_argument('-f', '--unit_from', help='Unit to convert from')
        parser.add_argument('-t', '--unit_to', help='Unit to convert to')

        args = parser.parse_args()

        if args.unit_from and args.unit_to in temperature:
            print convert_temperature(4, float(args.amount), args.unit_from, 
                args.unit_to)
        else:
            for group in unit_groups:
                if args.unit_from and args.unit_to in group:
                    print convert_units(4, float(args.amount), args.unit_from, 
                        args.unit_to, group)

    except Exception:
        usage()
        print traceback.print_exc()
        sys.exit(2)
    finally:
        sys.exit()


if __name__ == '__main__':
    main()
