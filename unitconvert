#!/usr/bin/env python

import traceback
import sys
import argparse


# Temperature conversion goes in its own special function because the
# math is much different than the other units
def convert_temperature(dec_space, amt, conv_from, conv_to):
    temp_units = {
        'F': {
            'C': (amt - 32.0) * 5 / 9,
            'K': (amt + 459.67) * 5 / 9,
            'F': amt
        },
        'C': {
            'F': (amt * 9) / 5 + 32.0,
            'K': amt + 273.15,
            'C': amt
        },
        'K': {
            'F': amt * 9 / 5 - 459.67,
            'C': amt - 273.15,
            'K': amt
        }
    }
    calc = round(temp_units[conv_from][conv_to], dec_space)
    return '{0}{1} = {2}{3}'.format(amt, conv_from, calc, conv_to)


def convert_units(dec_space, amt, conv_from, conv_to, units):
    calc = round((amt * units[conv_from]) / units[conv_to], dec_space)
    if calc >= 0:
        return '{0}{1} = {2}{3}'.format(amt, conv_from, calc, conv_to)
    else:
        return "Can't convert."


unit_groups = [digital_units, length_units, mass_units, time_units, 
volume_units]
temperature = ['F', 'C', 'K']


def usage():
    print 'Usage: [amount] [convert from] [convert to]'
    print 'Example: 34 GB MB'
    print '\nAvailable conversions:'
    print 'Digital: {0}'.format(', '.join(digital_units.keys()))
    print 'Length: {0}'.format(', '.join(length_units.keys()))
    print 'Mass: {0}'.format(', '.join(mass_units.keys()))
    print 'Temperature: {0}'.format(', '.join(temperature))
    print 'Time: {0}'.format(', '.join(time_units.keys()))
    print 'Volume: {0}'.format(', '.join(volume_units.keys()))


def main():
    try:

        parser = argparse.ArgumentParser()
        parser.add_argument('-a', '--amount', help='Amount to convert')
        parser.add_argument('-f', '--unit_from', help='Unit to convert from')
        parser.add_argument('-t', '--unit_to', help='Unit to convert to')

        args = parser.parse_args()

        if args.unit_from and args.unit_to in temperature:
            print convert_temperature(4, float(args.amount), args.unit_from, 
                args.unit_to)
        else:
            for group in unit_groups:
                if args.unit_from and args.unit_to in group:
                    print convert_units(4, float(args.amount), args.unit_from, 
                        args.unit_to, group)

    except Exception:
        usage()
        print traceback.print_exc()
        sys.exit(2)
    finally:
        sys.exit()


if __name__ == '__main__':
    main()
